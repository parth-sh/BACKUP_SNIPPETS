## Big O Cheat Sheet
https://www.bigocheatsheet.com/

## Array Common Questions
Sub array questions: Prefix sum is commonly used here

Sliding Window protocol: Most Question related to calculation of sub array or substring

## String Common Properties
Anagram Problems: Sorted version of anagrams are same, Frequency Count is same
Palindrome Problem: Two-pointer Technique: Similar from front and back, or reversing a string in place

## Linked List Notes
Linked List implementaton methods: insert, update, remove, print
Common Solving Techniques
    Dummy Node
    slow, fast pointers
    prev, current, next pointers
Common Question
    Reverse Linked List
    Merge sort in Linked List
    Merge 2 sorted lists
    Intersection of 2 lists

## Stack Notes
Cons of implementing stack using arrays: Array are of Fixed Size
Solution to above con: Implementing using Dynamic arrays, Linked List

Stack Implementation using Array
Stack Implementation using Linked List


TODO: Analyze the question while doing, then fill this documentation
TODO: Do all questions given by varun, till now
TODO: Do all questions of strivers
TODO: Map all questions done by varun in brain 


Tree (we are storing integers), find the target integer in the tree and return whether it's present or not.
-----------------------
bool preorder(TreeNode* node, int target) {
    if(node == NULL) {
        return false;
    }
    bool l = preorder(node->left, target);
    bool r = preorder(node->right, target);
    return (node->val == target) || l || r;
}

            1
        2       3
    4       5

===================================
-> revise your concepts: For trees -> DFS (inorder, preorder, postorder) and BFS
-> coding was irregular. 
-> dry run => through code in head but not what was written.
-> Test inputs

===================================
1. Coding interview expectations
2. How to structure your answer
3. How to prepare.
4. What topics you should cover.



====================================
45 mins -> 1 questions, 2 questions: Easy, Mid. NO hard questions.
thought process
drive the interview
data structures knowledge,
readable code,
dry run and testing

====================================
How to structure your answer?
1. Understand the Problem Statement properly. Ask any questions for clarifications or any assumptions 
that you make. (2 mins)
2. Solutioning. (3-5 mins)
different solutions, think about data structures (2-3 approaches).
Elimination Technique.
()
3. Coding: (5-10 mins)
4. Dry Run: (2 mins)
5. Test Inputs: Which ones and Why? (2 mins)

Easy, Easy-Medium,
Medium: 30 mins - 1 hour (DP, Graphs, Greedy, Sliding Window)

=====================================
Topics:
1. Strings, Array -> (Few concepts) -> Binary Search, Merge Sort
   -> LinkedList, Stacks, Queues -> 
2. HashMap & Sets (Memory lookup) & Heaps (Rank an element)-> 
3. Trees & Graphs -> Simple & Straight-forward
4. Union Set DS -> 
5. Segment Trees 
6. Random Shuffles
7. Dynamic Programming -> Recursion with Memoization, Knapsack, Coin change, Longest Contiguous SubArray

=======================================
For Graphs: http://algorithmics.lsi.upc.edu/docs/Dasgupta-Papadimitriou-Vazirani.pdf
Visuals -> 

-> What all you need to cover? Adj Lists vs Matrix, (BFS & DFS), Weighted BFS (Dijkstra), 
Topological Sorting, 
Cycle in graph,
Directed vs Adirected Graph, 
Minimum Spanning Tree
-> Prepare a Plan (effort per day, read topics, and solve problems)
-> How you solve the problem?

Goal: You learn and you are able to use your learning.
=======================================

=> 4-5 hours on weekdays
=> 6-7 hours on weekend


